version: '3.8'

services:
  reverseproxy:
    build:
      context: ./data/nginx
      dockerfile: Nginx.Dockerfile
    ports:
      - "80:80"
      - "443:443"
    restart: always
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./data/nginx/certs:/etc/nginx/certs
      - ./data/nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - enterprise-solution-network
    
  api:
    container_name: 'enterprise-solution-api'
    image: 'enterprisesolutionapi:dev'
    build:
      context: .
      dockerfile: Enterprise.Solution.API/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    expose:
      - "5000"
    restart: always
    depends_on:
      - "reverseproxy"
      - "postgres"
    networks:
      - enterprise-solution-network

  redisCache:
    image: redis
    ports:
      - "6379:6379"
    networks:
      - enterprise-solution-network
        
  postgres:
    container_name: 'enterprise-solution-postgres'
    image: postgres
    restart: always
    environment:
      PGUSER: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: EnterpriseSolutionDatabase
    expose:
      - "5432"
    user: postgres
    ports:
      - "5432:5432"
    command: 'postgres'
    networks:
      - enterprise-solution-network

networks:
  enterprise-solution-network:
    driver: bridge
    
# docker-compose build
# docker-compose up -d
# docker-compose down

# Browse to: http://localhost/swagger